import os
import json
import logging
import urllib.parse
import re
from dotenv import load_dotenv
import gspread
from openai import OpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_SERVICE_ACCOUNT = os.getenv("GOOGLE_SERVICE_ACCOUNT")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    credentials = json.loads(GOOGLE_SERVICE_ACCOUNT)
    gc = gspread.service_account_from_dict(credentials)
    sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("–ù–∞–ª–∏—á–∏–µ")
    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ò–ò (–Ω–∞ —Å–µ—Å—Å–∏—é)
chat_histories = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def search_cars_by_keywords(query):
    if not sheet:
        return []

    try:
        stop_words = {"–∏—â—É", "—Ö–æ—á—É", "–Ω—É–∂–µ–Ω", "–Ω—É–∂–Ω–∞", "–Ω—É–∂–Ω–æ", "–ø–æ–¥–æ–±—Ä–∞—Ç—å"}
        query_words = re.findall(r'\w+', query.lower())
        keywords = [word for word in query_words if word not in stop_words]

        values = sheet.get_all_values()
        headers = values[0]
        rows = values[1:]

        matches = []

        for row in rows:
            row_dict = dict(zip(headers, row))
            row_text = " ".join(value.lower() for value in row_dict.values())
            if all(word in row_text for word in keywords):
                matches.append(row_dict)
                if len(matches) >= 3:
                    break

        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        return []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
def needs_manager(reply):
    phrases = ["–Ω–µ –∑–Ω–∞—é", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "—á–µ–ª–æ–≤–µ–∫", "–æ—Ç–≤–∞–ª–∏", "–ø–æ–º–æ–≥–∏"]
    return any(phrase in reply.lower() for phrase in phrases)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É —Ç—ã –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X1')")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_query(message: types.Message):
    user_id = message.from_user.id
    user_query = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username}: {user_query}")

    # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    matches = search_cars_by_keywords(user_query)
    if matches:
        for car in matches:
            car_info = "\n".join([f"{k}: {v}" for k, v in car.items()])

            car_id = car.get("ID")  # ID —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "001", "002", –∏ —Ç.–¥.
            query_encoded = urllib.parse.quote(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {user_query}, ID: {car_id}")
            site_url = f"https://mirexlife.github.io/newtimeauto-site/car.html?id={car_id}"

            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì© –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=site_url)
            )

            await message.answer(car_info, reply_markup=keyboard)
        return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    try:
        history = chat_histories.get(user_id, [])
        history.append({"role": "user", "content": user_query})

        messages = [
            {"role": "system", "content": "–¢—ã –∞–≤—Ç–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç –Ω–∞–≤–æ–¥—è—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @NewTimeAuto_sales."}
        ] + history

        chat_completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=300
        )

        reply = chat_completion.choices[0].message.content.strip()
        history.append({"role": "assistant", "content": reply})
        chat_histories[user_id] = history[-10:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        await message.answer(reply)

        if needs_manager(reply):
            full_history = "\n".join([m["content"] for m in history if m["role"] == "user"])
            query_encoded = urllib.parse.quote(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø–æ–¥–±–æ—Ä–µ –∞–≤—Ç–æ.\n\n–ò—Å—Ç–æ—Ä–∏—è:\n{full_history}")
            manager_url = f"https://t.me/newtimeauto_sales?text={query_encoded}"

            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ text –≤ message.answer() –∑–¥–µ—Å—å
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=manager_url)
            )
            await message.answer("–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–º–æ—á—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("–ò–ò –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    executor.start_polling(dp, skip_updates=True)
