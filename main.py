import os
import json
import logging
import urllib.parse
import re
import asyncio
from dotenv import load_dotenv
import gspread
from openai import OpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_SERVICE_ACCOUNT = os.getenv("GOOGLE_SERVICE_ACCOUNT")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    credentials = json.loads(GOOGLE_SERVICE_ACCOUNT)
    gc = gspread.service_account_from_dict(credentials)
    sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("–ù–∞–ª–∏—á–∏–µ")
    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# –ü–∞–º—è—Ç—å –¥–ª—è –ò–ò
chat_histories = {}

# –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def search_cars_by_keywords(query):
    if not sheet:
        return []

    try:
        stop_words = {"–∏—â—É", "—Ö–æ—á—É", "–Ω—É–∂–µ–Ω", "–Ω—É–∂–Ω–∞", "–Ω—É–∂–Ω–æ", "–ø–æ–¥–æ–±—Ä–∞—Ç—å"}
        query_words = re.findall(r'\w+', query.lower())
        keywords = [word for word in query_words if word not in stop_words]

        values = sheet.get_all_values()
        headers = values[0]
        rows = values[1:]

        matches = []
        for row in rows:
            row_dict = dict(zip(headers, row))
            row_text = " ".join(value.lower() for value in row_dict.values())
            if all(word in row_text for word in keywords):
                matches.append(row_dict)
                if len(matches) >= 3:
                    break

        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ –ø–æ ID
def get_car_by_id(car_id):
    try:
        values = sheet.get_all_values()
        headers = values[0]
        rows = values[1:]

        for row in rows:
            row_dict = dict(zip(headers, row))
            if row_dict.get("ID") == car_id:
                return row_dict
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ –ø–æ ID: {e}")
        return None

# –ù—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
def needs_manager(reply):
    phrases = ["–Ω–µ –∑–Ω–∞—é", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "—á–µ–ª–æ–≤–µ–∫", "–æ—Ç–≤–∞–ª–∏", "–ø–æ–º–æ–≥–∏"]
    return any(phrase in reply.lower() for phrase in phrases)

# /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    args = message.get_args() or ""
    if args.startswith("id_"):
        car_id = args.replace("id_", "")
        car = get_car_by_id(car_id)
        if car:
            car_info = "\n".join([f"{k}: {v}" for k, v in car.items()])
            site_url = f"https://t.me/newtimeauto_bot/app?startapp=id_{car_id}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì© –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=site_url)
            )
            await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ:\n\n{car_info}", reply_markup=keyboard)
        else:
            await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
    else:
        catalog_url = f"https://t.me/newtimeauto_bot/app"
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üöò –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", url=catalog_url)
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ –∏–∑ –Ω–∞–ª–∏—á–∏—è, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –∑–∞–∫–∞–∑. –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n*BMW X1*\n\n"
            "–ò–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n"
            "–î–ª—è —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ *–º–µ–Ω–µ–¥–∂–µ—Ä*.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

# /help
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "üëã –≠—Ç–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –Ω–∞–ª–∏—á–∏—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É –∏—â–µ—à—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "`Kia Sportage –ö–æ—Ä–µ—è`\n\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–¥–∞—Å—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞.",
        parse_mode="Markdown"
    )

# –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def handle_query(message: types.Message):
    user_id = message.from_user.id
    user_query = message.text.strip()

    if not user_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username} (ID: {user_id}): {user_query}")

    matches = search_cars_by_keywords(user_query)
    if matches:
        for car in matches:
            car_info = "\n".join([f"{k}: {v}" for k, v in car.items()])
            car_id = car.get("ID")
            site_url = f"https://t.me/newtimeauto_bot/app?startapp=id_{car_id}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì© –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=site_url)
            )
            await message.answer(car_info, reply_markup=keyboard)
        return

    try:
        history = chat_histories.get(user_id, [])
        history.append({"role": "user", "content": user_query})

        messages = [
            {"role": "system", "content": "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ NewTime Auto. –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –ø–æ–∫–∞–∂–∏ 2‚Äì3 –∏–∑ –Ω–∏—Ö. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –∫ –ø–æ–¥–±–æ—Ä—É –∞–≤—Ç–æ. –ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É. –ú–æ–∂–µ—à—å –∏–∑—Ä–µ–¥–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–≥–æ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è, –ø–∏—à–µ—Ç —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å, –∏–ª–∏ –Ω–µ –Ω–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram. –î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è."}
        ] + history

        chat_completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=300
        )

        reply = chat_completion.choices[0].message.content.strip()
        history.append({"role": "assistant", "content": reply})
        chat_histories[user_id] = history[-10:]

        await message.answer(reply)

        if needs_manager(reply):
            full_history = "\n".join([m["content"] for m in history if m["role"] == "user"])
            query_encoded = urllib.parse.quote(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø–æ–¥–±–æ—Ä–µ –∞–≤—Ç–æ.\n\n–ò—Å—Ç–æ—Ä–∏—è:\n{full_history}"
            )
            manager_url = f"https://t.me/newtimeauto_sales?text={query_encoded}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=manager_url)
            )
            await message.answer("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("–ò–ò –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π.")

# –£–¥–∞–ª–µ–Ω–∏–µ Webhook –∏ –∑–∞–ø—É—Å–∫ polling
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling()

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.run(main())
