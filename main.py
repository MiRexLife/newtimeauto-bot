import os
import json
import logging
import urllib.parse
import re
from dotenv import load_dotenv
import gspread
from openai import OpenAI
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_SERVICE_ACCOUNT = os.getenv("GOOGLE_SERVICE_ACCOUNT")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    credentials = json.loads(GOOGLE_SERVICE_ACCOUNT)
    gc = gspread.service_account_from_dict(credentials)
    sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("–ù–∞–ª–∏—á–∏–µ")
    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def search_cars_by_keywords(query):
    if not sheet:
        return []

    try:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
        stop_words = {"–∏—â—É", "—Ö–æ—á—É", "–Ω—É–∂–µ–Ω", "–Ω—É–∂–Ω–∞", "–Ω—É–∂–Ω–æ", "–ø–æ–¥–æ–±—Ä–∞—Ç—å", "–º–∞—à–∏–Ω—É", "–∞–≤—Ç–æ"}
        query_words = re.findall(r'\w+', query.lower())
        keywords = [word for word in query_words if word not in stop_words]

        rows = sheet.get_all_records()
        matches = []

        for row in rows:
            row_text = " ".join(str(value).lower() for value in row.values())
            if all(word in row_text for word in keywords):
                matches.append(row)
                if len(matches) >= 3:
                    break

        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
def needs_manager(reply):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if any(phrase in reply.lower() for phrase in ["–Ω–µ –∑–Ω–∞—é", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "—á–µ–ª–æ–≤–µ–∫", "–æ—Ç–≤–∞–ª–∏", "–ø–æ–º–æ–≥–∏"]):
        return True
    return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É —Ç—ã –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X1')")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_query(message: types.Message):
    user_query = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username}: {user_query}")

    # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    matches = search_cars_by_keywords(user_query)
    if matches:
        for car in matches:
            car_info = "\n".join([f"{k}: {v}" for k, v in car.items()])

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
            query_encoded = urllib.parse.quote(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {user_query}")
            chat_url = f"https://t.me/newtimeauto_sales?text={query_encoded}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì© –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=chat_url)
            )

            await message.answer(car_info, reply_markup=keyboard)
        return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º GPT
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∫ GPT...")
        chat_completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–≤—Ç–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É. –°–æ—Ö—Ä–∞–Ω—è–π –ø–∞–º—è—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç –Ω–∞–≤–æ–¥—è—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª –∏ –Ω–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ú–æ–∂–µ—à—å —É–ª—ã–±–∞—Ç—å—Å—è –∏–∑—Ä–µ–¥–∫–∞. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–≥–æ –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - @NewTimeAuto_sales"},
                {"role": "user", "content": f"–ü–æ–º–æ–≥–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_query}"}
            ],
            temperature=0.7,
            max_tokens=300
        )
        reply = chat_completion.choices[0].message.content.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if needs_manager(reply):
            reply += "\n\n–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –ú–æ–≥—É –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π! –ù–∞–ø–∏—à–∏—Ç–µ @NewTimeAuto_sales."
        
        await message.answer(reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("–ò–ò –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    executor.start_polling(dp, skip_updates=True)
