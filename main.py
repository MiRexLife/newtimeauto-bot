import logging
import os
import json
from aiogram import Bot, Dispatcher, types, executor
import openai
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_SERVICE_ACCOUNT = os.getenv("GOOGLE_SERVICE_ACCOUNT")

logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

logging.info("–ë–æ—Ç –∏ OpenAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
try:
    service_account_info = json.loads(GOOGLE_SERVICE_ACCOUNT)
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
    client = gspread.authorize(credentials)
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–ù–∞–ª–∏—á–∏–µ1")
    logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheets.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
    sheet = None  # —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –±–æ—Ç

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.username}")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –∏—â–µ—à—å: –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥, –∫—É–∑–æ–≤, –±—é–¥–∂–µ—Ç –∏ —Ç.–¥.")

def parse_criteria(text):
    logging.info(f"–†–∞–∑–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {text}")
    criteria = {}
    words = text.lower().split()

    for word in words:
        if word.isdigit():
            if int(word) > 1990:
                criteria["–ì–æ–¥"] = int(word)
            else:
                criteria["–¶–µ–Ω–∞"] = int(word)
        elif word in ["—Å–µ–¥–∞–Ω", "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫", "—Ö—ç—Ç—á–±–µ–∫", "–∫—É–ø–µ"]:
            criteria["–ö—É–∑–æ–≤"] = word
        else:
            criteria["–ú–∞—Ä–∫–∞"] = word.capitalize()

    logging.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏: {criteria}")
    return criteria

def match_car(car, criteria):
    for key, value in criteria.items():
        if key not in car:
            continue
        car_value = str(car[key]).lower()
        if key == "–¶–µ–Ω–∞":
            try:
                if int(car[key]) > int(value):
                    return False
            except:
                return False
        elif key == "–ì–æ–¥":
            try:
                if int(car[key]) < int(value):
                    return False
            except:
                return False
        else:
            if value.lower() not in car_value:
                return False
    return True

async def ask_gpt(question):
    logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI: {question}")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç, –ø–æ–º–æ–≥–∞–π –ª—é–¥—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ."},
                {"role": "user", "content": question}
            ]
        )
        reply = response.choices[0].message.content.strip()
        logging.info(f"–û—Ç–≤–µ—Ç GPT: {reply}")
        return reply
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

@dp.message_handler()
async def handle_query(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}: {message.text}")
    if not sheet:
        await message.reply("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    query = message.text
    criteria = parse_criteria(query)

    try:
        cars = sheet.get_all_records()
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        return

    matches = []
    for car in cars:
        if match_car(car, criteria):
            matches.append(car)
        if len(matches) >= 3:
            break

    if matches:
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        for car in matches:
            try:
                text = f"{car.get('–ú–∞—Ä–∫–∞', '‚Äî')} {car.get('–ú–æ–¥–µ–ª—å', '')} {car.get('–ì–æ–¥', '')}\n–¶–µ–Ω–∞: {car.get('–¶–µ–Ω–∞', '‚Äî')}‚ÇΩ\n–¶–≤–µ—Ç: {car.get('–¶–≤–µ—Ç', '‚Äî')}"
                kb = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", url="https://t.me/NewTimeAuto_bot")
                )
                await message.reply(text, reply_markup=kb)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ: {e}")
                logging.debug(f"–ê–≤—Ç–æ —Å –æ—à–∏–±–∫–æ–π: {car}")
                continue
    else:
        logging.info("–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ GPT.")
        gpt_answer = await ask_gpt(query)
        await message.reply(f"ü§ñ {gpt_answer}")

if __name__ == "__main__":
    logging.info
