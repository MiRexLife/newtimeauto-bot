# ... (–≤—Å—ë –∫–∞–∫ —Ä–∞–Ω—å—à–µ: –∏–º–ø–æ—Ä—Ç—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram, Google Sheets –∏ OpenAI) ...

# –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ –ø–æ ID
def get_car_by_id(car_id):
    try:
        values = sheet.get_all_values()
        headers = values[0]
        rows = values[1:]

        for row in rows:
            row_dict = dict(zip(headers, row))
            if row_dict.get("ID") == car_id:
                return row_dict
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ –ø–æ ID: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ startapp=id_001
    if message.get_args().startswith("id_"):
        car_id = message.get_args().replace("id_", "")
        car = get_car_by_id(car_id)
        if car:
            car_info = "\n".join([f"{k}: {v}" for k, v in car.items()])
            site_url = f"https://mirexlife.github.io/newtimeauto-site/car.html?id={car_id}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì© –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=site_url)
            )
            await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ:\n\n{car_info}", reply_markup=keyboard)
        else:
            await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É —Ç—ã –∏—â–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'BMW X1')")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "üëã –≠—Ç–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –Ω–∞–ª–∏—á–∏—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –∫–∞–∫—É—é –º–∞—à–∏–Ω—É –∏—â–µ—à—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "`BMW X1 –±–µ–Ω–∑–∏–Ω`\n\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–¥–∞—Å—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞.\n\n",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –±—ã–ª–æ)
@dp.message_handler()
async def handle_query(message: types.Message):
    user_id = message.from_user.id
    user_query = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username}: {user_query}")

    # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    matches = search_cars_by_keywords(user_query)
    if matches:
        for car in matches:
            car_info = "\n".join([f"{k}: {v}" for k, v in car.items()])
            car_id = car.get("ID")
            site_url = f"https://mirexlife.github.io/newtimeauto-site/car.html?id={car_id}"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üì© –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=site_url)
            )
            await message.answer(car_info, reply_markup=keyboard)
        return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º GPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    try:
        history = chat_histories.get(user_id, [])
        history.append({"role": "user", "content": user_query})

        messages = [
            {"role": "system", "content": "–¢—ã –∞–≤—Ç–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç –Ω–∞–≤–æ–¥—è—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ telegram."}
        ] + history

        chat_completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=300
        )

        reply = chat_completion.choices[0].message.content.strip()
        history.append({"role": "assistant", "content": reply})
        chat_histories[user_id] = history[-10:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

        await message.answer(reply)

        if needs_manager(reply):
            full_history = "\n".join([m["content"] for m in history if m["role"] == "user"])
            query_encoded = urllib.parse.quote(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø–æ–¥–±–æ—Ä–µ –∞–≤—Ç–æ.\n\n–ò—Å—Ç–æ—Ä–∏—è:\n{full_history}")
            manager_url = f"https://t.me/newtimeauto_sales?text={query_encoded}"

            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=manager_url)
            )
            await message.answer(reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await message.answer("–ò–ò –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    executor.start_polling(dp, skip_updates=True)
